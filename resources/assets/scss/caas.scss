/**
 * Global SCSS
 *
 *  We're adapting RSCSS and ITCSS for ease of development and readability.
 *   Are there, and will there be, "better" solutions? No doubt about it: Yes.
 *   The tradeoff is worth the millisecond extra in processing power.  It's barely worth discussing, but acknowledging it is important.
 *   There will be exceptions to these rules below.  It would be nice to notate why, or include a TODO to do better in the future.
 *
 *  CSS rules are based on RSCSS: http://rscss.io/
 *   - Components are individual pieces of your UI. (AKA "Block" in BEM)
 *    - Name them with two words, separate by dash (.like-button)
 *    - Can't think of two words? Suffix them with block/inline level words: box, card, block, button, span (.account-box)
 *    - Components can be nested inside other Components.
 *    - Make sure that your specificity is in check by using the child selector when necessary
 *   - Elements are things inside your component.
 *    - Name them with one words (.field, .action)
 *    - If you absolutely need two words, don't include a dash or underline (.firstname, .lastname)
 *    - Do not use tag selectors (h3), always name them (.heading, .name, etc)
 *   - Variants are modifiers to either a Component or Element. (AKA "Modifier" in BEM)
 *    - Prefix variants with a dash (.-wide, .-left)
 *    - Keep naming convention from Elements (one word only)
 *     - However, something like .-with-icon seems acceptable in RSCSS documentation
 *   - Positioning Properties
 *    - Components should be made in a way that they're reusable in different contexts. Avoid putting these properties in components unless they have a fixed width/height, like logos.
 *    - This means `position`, `top/left/right/bottom`, `float/clear`, `margin`, `width/height`.  Padding seems to be okay.
 *    - When you need to position, do it in the context of it's parent (.article-list > .article-card { width: 33%; }), as opposed to on it's own (.article-card { width: 33%; }).
 *   - Helpers
 *    - These things need to be RARE.  They will all include the !important tag and live in it's own file (More on that in ITCSS below)
 *    - Start them with an underscore (._center)
 *    - Again, keep the naming in line with the Elements, no dashes (._nomargin)
 *   - Avoid Over Nesting
 *    - 2 levels of nesting is about the deepest a normal file should go.  3 can be acceptable in some situations, but 4 is heavily frowned upon.
 *    - By keeping each component in it's own file, we help avoid this issue as well.
 *
 *  CSS organization is based on ITCSS: https://speakerdeck.com/dafed/managing-css-projects-with-itcss#48
 *   - Write CSS in specificity order.
 *   - Progressively adding styles; never undoing.
 *   - Add things into the relevant layers (usually the last ones).
 *   - ï¿¼Each stage is more detailed and explicit than the last one.
 *   - All rulesets should only ever add to and inherit from previous ones.
 */

/**
 * Settings
 *  - Globally available settings
 *  - Configuration switches
 *  - Brand colors, etc
 *
 *  $color: #abcdefg;
 *  $spacing-unit: 10px;
 */
@import '1_settings/variables';

// TODO, Shift these around into the ITCSS/RSCSS
@import 'old-ffxivcrafting';

/**
 * Tools
 *  - Globally available tools
 *  - Public mixins
 *  - Helper functions
 *
 *  @mixin font-brand() {
 *   font-family: "UI Font", sans-serif;
 *   font-weight: 400;
 *  }
 */
@import '2_tools/mixins';

/**
 * Generic
 *  - Ground zero styles
 *  - Low specificity, far reaching
 *  - Resets, Normalize, etc
 *
 *  * {
 *   box-sizing: border-box; // autoprefixer picks up the rest
 *  }
 */
// @import '3_generic/caas-icon-font';

/**
 * Base
 *  - Unclassed HTML elements
 *  - H1-H6, basic links, lists, etc
 *  - Last layer we see type selectors (like `a {}` and `blockquote {}`)
 *
 *  ul {
 *   list-style: square outside;
 *  }
 */
@import '4_base/raw-elements';
@import '4_base/layout';

/**
 * Objects
 *  - RSCSS starts here, but just the bare bones/non specific pieces
 *  - Design Patterns, no cosmetics
 *  - Begin using classes exclusively
 *  - Agnostically named classes (like `.ui-list {}`)
 *
 *  .ui-list {
 *    list-style: none;
 *    > .item {
 *      padding: $spacing-unit;
 *    }
 *  }
 */
// @import '5_objects/FILE';

/**
 * Components
 *  - RSCSS comes to life here
 *  - Designed pieces of UI
 *  - Still using classes exclusively
 *  - More explicitly named classes (like `.products-list {}`)
 *
 *  .products-list {
 *    @include font-brand();
 *    border-top: 1px solid $color;
 *    > .item {
 *      border-bottom: 1px solid $color;
 *    }
 *  }
 */
@import '6_components/floating-header';
@import '6_components/flyout-functionality';
@import '6_components/picture-block';

/**
 * Trumps
 *  - Overrides, helpers, utilities
 *  - Only affect one piece of the DOM at a time
 *  - Usually carry !important
 *
 *  .one-half {
 *    width: 50% !important;
 *  }
 */
@import '7_trumps/utilities';
@import '7_trumps/bootstrap-overrides';
